name: Docker Image CI

on:
  push:
    branches: #[ "main" ]
    - '**'
  pull_request:
    branches: #[ "main" ]
    - '**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  tests:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Bistro
    steps:
    - uses: actions/checkout@v4
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build
    - name: Test with the dotnet CLI
      run: dotnet test
      
    #- uses: actions/checkout@v4

    #- name: Run tests
      #run: dotnet test /home/runner/Bistro/Bistro.UnitTest/Bistro.UnitTest.csproj --logger trx

    # - if: success()
    #   name: Build the Docker Image
    #   run: docker build -t bistro_image:latest .
    #   #run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)

    
    # - name: Upload a Build Artifact
    #   uses: ishworkh/container-image-artifact-upload@v2.0.0
    #   with:
    #     image: "bistro_image:latest"
      # uses: actions/upload-artifact@v4.6.0
      # with:
      #   # Artifact name
      #    name: workspace_artifacts # optional, default is artifact
      #   # A file, directory or wildcard pattern that describes what to upload
      #    path: ${{ github.workspace }}
  build-and-push-image:
    runs-on: ubuntu-latest
    needs: tests
    if: ${{ always() && needs.tests.result == 'success' }}
#There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
    #if: ${{ !cancelled() && !failure() }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

#Sets the permissions granted to the GITHUB_TOKEN for the actions in this job.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

#Uses the docker/login-action action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#This step uses docker/metadata-action to extract tags and labels that will be applied to the specified image. The id "meta" allows the output of this step to be referenced in a subsequent step. The images value provides the base name for the tags and labels.

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: "./Bistro"
          file: "./Bistro/Dockerfile" 
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

#This step uses the docker/build-push-action action to build the image, based on your repository's Dockerfile. If the build succeeds, it pushes the image to GitHub Packages. It uses the context parameter to define the build's context as the set of files located in the specified path. For more information, see Usage in the README of the docker/build-push-action repository. It uses the tags and labels parameters to tag and label the image with the output from the "meta" step.

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
